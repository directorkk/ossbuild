Index: ext/speex/gstspeexdec.c
===================================================================
--- ext/speex/gstspeexdec.c	(revision 535)
+++ ext/speex/gstspeexdec.c	(working copy)
@@ -144,7 +144,6 @@
 gst_speex_dec_reset (GstSpeexDec * dec)
 {
   gst_segment_init (&dec->segment, GST_FORMAT_UNDEFINED);
-  dec->granulepos = -1;
   dec->packetno = 0;
   dec->frame_size = 0;
   dec->frame_duration = 0;
@@ -152,6 +151,12 @@
   free (dec->header);
   dec->header = NULL;
   speex_bits_destroy (&dec->bits);
+
+  if (dec->stereo) {
+    speex_stereo_state_destroy (dec->stereo);
+    dec->stereo = NULL;
+  }
+
   if (dec->state) {
     speex_decoder_destroy (dec->state);
     dec->state = NULL;
@@ -475,8 +480,6 @@
       gst_segment_set_newsegment_full (&dec->segment, update,
           rate, arate, GST_FORMAT_TIME, start, stop, time);
 
-      dec->granulepos = -1;
-
       GST_DEBUG_OBJECT (dec, "segment now: cur = %" GST_TIME_FORMAT " [%"
           GST_TIME_FORMAT " - %" GST_TIME_FORMAT "]",
           GST_TIME_ARGS (dec->segment.last_stop),
@@ -535,10 +538,10 @@
   speex_decoder_ctl (dec->state, SPEEX_GET_FRAME_SIZE, &dec->frame_size);
 
   if (dec->header->nb_channels != 1) {
+    dec->stereo = speex_stereo_state_init ();
     dec->callback.callback_id = SPEEX_INBAND_STEREO;
     dec->callback.func = speex_std_stereo_request_handler;
-    dec->callback.data = &dec->stereo;
-    dec->stereo = (SpeexStereoState) SPEEX_STEREO_STATE_INIT;
+    dec->callback.data = dec->stereo;
     speex_decoder_ctl (dec->state, SPEEX_SET_HANDLER, &dec->callback);
   }
 
@@ -647,9 +650,13 @@
   guint8 *data;
   SpeexBits *bits;
 
+  if (!dec->frame_duration)
+    goto not_negotiated;
+
   if (timestamp != -1) {
     dec->segment.last_stop = timestamp;
-    dec->granulepos = -1;
+  } else {
+    timestamp = dec->segment.last_stop;
   }
 
   if (buf) {
@@ -663,16 +670,6 @@
     bits = &dec->bits;
 
     GST_DEBUG_OBJECT (dec, "received buffer of size %u, fpp %d", size, fpp);
-
-    if (!GST_BUFFER_TIMESTAMP_IS_VALID (buf)
-        && GST_BUFFER_OFFSET_END_IS_VALID (buf)) {
-      dec->granulepos = GST_BUFFER_OFFSET_END (buf);
-      GST_DEBUG_OBJECT (dec,
-          "Taking granulepos from upstream: %" G_GUINT64_FORMAT,
-          dec->granulepos);
-    }
-
-    /* copy timestamp */
   } else {
     /* concealment data, pass NULL as the bits parameters */
     GST_DEBUG_OBJECT (dec, "creating concealment data");
@@ -722,31 +719,13 @@
       break;
     }
     if (dec->header->nb_channels == 2)
-      speex_decode_stereo_int (out_data, dec->frame_size, &dec->stereo);
+      speex_decode_stereo_int (out_data, dec->frame_size, dec->stereo);
 
-    if (dec->granulepos == -1) {
-      if (dec->segment.format != GST_FORMAT_TIME) {
-        GST_WARNING_OBJECT (dec, "segment not initialized or not TIME format");
-        dec->granulepos = dec->frame_size;
-      } else {
-        dec->granulepos = gst_util_uint64_scale_int (dec->segment.last_stop,
-            dec->header->rate, GST_SECOND) + dec->frame_size;
-      }
-      GST_DEBUG_OBJECT (dec, "granulepos=%" G_GINT64_FORMAT, dec->granulepos);
-    }
-
-    if (timestamp == -1) {
-      timestamp = gst_util_uint64_scale_int (dec->granulepos - dec->frame_size,
-          GST_SECOND, dec->header->rate);
-    }
-
-    GST_BUFFER_OFFSET (outbuf) = dec->granulepos - dec->frame_size;
-    GST_BUFFER_OFFSET_END (outbuf) = dec->granulepos;
     GST_BUFFER_TIMESTAMP (outbuf) = timestamp;
     GST_BUFFER_DURATION (outbuf) = dec->frame_duration;
 
-    dec->granulepos += dec->frame_size;
     dec->segment.last_stop += dec->frame_duration;
+    timestamp = dec->segment.last_stop;
 
     GST_LOG_OBJECT (dec, "pushing buffer with ts=%" GST_TIME_FORMAT ", dur=%"
         GST_TIME_FORMAT, GST_TIME_ARGS (timestamp),
@@ -758,10 +737,17 @@
       GST_DEBUG_OBJECT (dec, "flow: %s", gst_flow_get_name (res));
       break;
     }
-    timestamp = -1;
   }
 
   return res;
+
+  /* ERRORS */
+not_negotiated:
+  {
+    GST_ELEMENT_ERROR (dec, CORE, NEGOTIATION, (NULL),
+        ("decoder not initialized"));
+    return GST_FLOW_NOT_NEGOTIATED;
+  }
 }
 
 static GstFlowReturn
@@ -780,10 +766,12 @@
       res = speex_dec_chain_parse_comments (dec, buf);
       break;
     default:
+    {
       res =
           speex_dec_chain_parse_data (dec, buf, GST_BUFFER_TIMESTAMP (buf),
           GST_BUFFER_DURATION (buf));
       break;
+    }
   }
 
   dec->packetno++;
Index: ext/speex/gstspeexdec.h
===================================================================
--- ext/speex/gstspeexdec.h	(revision 535)
+++ ext/speex/gstspeexdec.h	(working copy)
@@ -53,7 +53,7 @@
   GstPad                *srcpad;
 
   void                  *state;
-  SpeexStereoState      stereo;
+  SpeexStereoState      *stereo;
 #ifdef SPEEX_1_0
   SpeexMode             *mode;
 #else
@@ -70,7 +70,6 @@
   guint64               packetno;
 
   GstSegment            segment;    /* STREAM LOCK */
-  gint64                granulepos; /* -1 = needs to be set from current time */
 };
 
 struct _GstSpeexDecClass {
